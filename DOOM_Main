<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DOOM 3D</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: #000;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            font-family: Arial, sans-serif;
            overflow: hidden;
        }
        
        #gameContainer {
            position: relative;
            border: 2px solid #333;
        }
        
        #gameCanvas {
            display: block;
            background: #000;
        }
        
        #instructions {
            position: absolute;
            top: 10px;
            left: 10px;
            color: #ff0000;
            font-size: 14px;
            text-shadow: 2px 2px 4px #000;
        }
        
        #crosshair {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 20px;
            height: 20px;
            pointer-events: none;
        }
        
        #crosshair::before,
        #crosshair::after {
            content: '';
            position: absolute;
            background: #ff0000;
        }
        
        #crosshair::before {
            top: 50%;
            left: 0;
            width: 100%;
            height: 2px;
            transform: translateY(-50%);
        }
        
        #crosshair::after {
            top: 0;
            left: 50%;
            width: 2px;
            height: 100%;
            transform: translateX(-50%);
        }
        
        .health-bar {
            position: absolute;
            bottom: 20px;
            left: 20px;
            background: #333;
            width: 200px;
            height: 20px;
            border: 2px solid #666;
        }

        .health-fill {
            background: linear-gradient(90deg, #ff0000, #ff6600, #00ff00);
            height: 100%;
            transition: width 0.3s;
        }

        .armor-bar {
            position: absolute;
            bottom: 50px;
            left: 20px;
            background: #333;
            width: 200px;
            height: 20px;
            border: 2px solid #666;
        }

        .armor-fill {
            background: linear-gradient(90deg, #00ffff, #0000ff);
            height: 100%;
            transition: width 0.3s;
        }
        
        .ammo-counter {
            position: absolute;
            bottom: 20px;
            right: 20px;
            color: #ff0000;
            font-size: 18px;
            font-weight: bold;
            text-shadow: 2px 2px 4px #000;
        }
    </style>
</head>
<body>
    <div id="gameContainer">
        <canvas id="gameCanvas" width="800" height="600"></canvas>
        <div id="crosshair"></div>
        <div id="instructions">
            WASD - Ruch<br>
            Mysz - Obracanie<br>
            Klik - Strzelanie<br>
            ESC - Zwolnij mysz
        </div>
        <div class="health-bar">
            <div class="health-fill" id="healthFill" style="width: 100%;"></div>
        </div>
        <div class="armor-bar">
            <div class="armor-fill" id="armorFill" style="width: 0%;"></div>
        </div>
        <div class="ammo-counter" id="ammoCounter">AMMO: 100</div>
    </div>

    <script>
        class DoomGame {
            constructor() {
                this.canvas = document.getElementById('gameCanvas');
                this.ctx = this.canvas.getContext('2d');
                this.width = this.canvas.width;
                this.height = this.canvas.height;
                
                // Player properties
                this.player = {
                    x: 1.5,
                    y: 1.5,
                    angle: 0,
                    speed: 0.05,
                    rotSpeed: 0.03,
                    health: 100,
                    armor: 0,
                    ammo: 100
                };
                
                // Map (1 = wall, 0 = empty)
                this.map = [
                    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                    [1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1],
                    [1,0,1,1,0,0,0,0,1,0,0,0,1,1,0,1],
                    [1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1],
                    [1,0,1,0,0,1,1,1,1,1,1,0,0,1,0,1],
                    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
                    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
                    [1,0,1,1,0,0,0,1,1,1,0,0,1,1,0,1],
                    [1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1],
                    [1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1],
                    [1,0,1,1,0,0,0,0,0,0,0,0,1,1,0,1],
                    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
                    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
                ];
                
                this.mapWidth = this.map[0].length;
                this.mapHeight = this.map.length;
                
                // Input handling
                this.keys = {};
                this.mouseX = 0;
                this.mouseY = 0;
                this.mouseLocked = false;
                
                // Shooting
                this.shooting = false;
                this.shootingTime = 0;
                this.muzzleFlash = false;
                
                // Enemies (simple dots for now)
                this.enemies = [
                    {x: 3.5, y: 3.5, health: 50, alive: true, dir: Math.random() * Math.PI * 2},
                    {x: 8.5, y: 5.5, health: 50, alive: true, dir: Math.random() * Math.PI * 2},
                    {x: 12.5, y: 8.5, health: 50, alive: true, dir: Math.random() * Math.PI * 2}
                ];

                this.ammoPickups = [
                    {x: 5.5, y: 2.5, amount: 20},
                    {x: 10.5, y: 4.5, amount: 20}
                ];

                this.armorPickups = [
                    {x: 2.5, y: 5.5, amount: 50}
                ];
                
                this.initializeEvents();
                this.updateUI();
                this.gameLoop();
            }
            
            initializeEvents() {
                // Keyboard events
                document.addEventListener('keydown', (e) => {
                    this.keys[e.code.toLowerCase()] = true;
                    if (e.code === 'Escape') {
                        document.exitPointerLock();
                        this.mouseLocked = false;
                    }
                });
                
                document.addEventListener('keyup', (e) => {
                    this.keys[e.code.toLowerCase()] = false;
                });
                
                // Mouse events
                this.canvas.addEventListener('click', () => {
                    if (!this.mouseLocked) {
                        this.canvas.requestPointerLock();
                    } else {
                        this.shoot();
                    }
                });
                
                document.addEventListener('pointerlockchange', () => {
                    this.mouseLocked = document.pointerLockElement === this.canvas;
                });
                
                document.addEventListener('mousemove', (e) => {
                    if (this.mouseLocked) {
                        this.player.angle += e.movementX * 0.002;
                    }
                });
            }
            
            shoot() {
                if (this.player.ammo > 0) {
                    this.player.ammo--;
                    this.shooting = true;
                    this.shootingTime = 10;
                    this.muzzleFlash = true;
                    
                    // Simple enemy hit detection
                    const rayAngle = this.player.angle;
                    const rayX = Math.cos(rayAngle);
                    const rayY = Math.sin(rayAngle);
                    
                    for (let enemy of this.enemies) {
                        if (enemy.alive) {
                            const dx = enemy.x - this.player.x;
                            const dy = enemy.y - this.player.y;
                            const distance = Math.sqrt(dx * dx + dy * dy);
                            
                            if (distance < 8) {
                                const angle = Math.atan2(dy, dx);
                                const angleDiff = Math.abs(angle - rayAngle);
                                
                                if (angleDiff < 0.2 || angleDiff > Math.PI * 2 - 0.2) {
                                    enemy.health -= 25;
                                    if (enemy.health <= 0) {
                                        enemy.alive = false;
                                    }
                                }
                            }
                        }
                    }
                    
                    this.updateUI();
                }
            }

            dealDamage(amount) {
                if (this.player.armor > 0) {
                    const absorbed = Math.min(amount, this.player.armor);
                    this.player.armor -= absorbed;
                    amount -= absorbed;
                }
                if (amount > 0) {
                    this.player.health = Math.max(0, this.player.health - amount);
                }
                this.updateUI();
            }

            updateUI() {
                document.getElementById('healthFill').style.width = `${this.player.health}%`;
                document.getElementById('armorFill').style.width = `${this.player.armor}%`;
                document.getElementById('ammoCounter').textContent = `AMMO: ${this.player.ammo}`;
            }
            
            update() {
                // Player movement
                const moveSpeed = this.player.speed;
                let newX = this.player.x;
                let newY = this.player.y;
                
                if (this.keys['keyw']) {
                    newX += Math.cos(this.player.angle) * moveSpeed;
                    newY += Math.sin(this.player.angle) * moveSpeed;
                }
                if (this.keys['keys']) {
                    newX -= Math.cos(this.player.angle) * moveSpeed;
                    newY -= Math.sin(this.player.angle) * moveSpeed;
                }
                if (this.keys['keya']) {
                    newX += Math.cos(this.player.angle - Math.PI/2) * moveSpeed;
                    newY += Math.sin(this.player.angle - Math.PI/2) * moveSpeed;
                }
                if (this.keys['keyd']) {
                    newX += Math.cos(this.player.angle + Math.PI/2) * moveSpeed;
                    newY += Math.sin(this.player.angle + Math.PI/2) * moveSpeed;
                }
                
                // Collision detection
                if (this.map[Math.floor(newY)][Math.floor(newX)] === 0) {
                    this.player.x = newX;
                    this.player.y = newY;
                }

                // Ammo pickups
                this.ammoPickups = this.ammoPickups.filter(p => {
                    if (Math.hypot(this.player.x - p.x, this.player.y - p.y) < 0.5) {
                        this.player.ammo += p.amount;
                        return false;
                    }
                    return true;
                });

                // Armor pickups
                this.armorPickups = this.armorPickups.filter(p => {
                    if (Math.hypot(this.player.x - p.x, this.player.y - p.y) < 0.5) {
                        this.player.armor = Math.min(100, this.player.armor + p.amount);
                        return false;
                    }
                    return true;
                });

                // Enemy movement and attacks
                for (let enemy of this.enemies) {
                    if (!enemy.alive) continue;
                    const speed = 0.02;
                    const ex = enemy.x + Math.cos(enemy.dir) * speed;
                    const ey = enemy.y + Math.sin(enemy.dir) * speed;
                    if (this.map[Math.floor(ey)][Math.floor(ex)] === 0) {
                        enemy.x = ex;
                        enemy.y = ey;
                    } else {
                        enemy.dir = Math.random() * Math.PI * 2;
                    }

                    const dist = Math.hypot(enemy.x - this.player.x, enemy.y - this.player.y);
                    if (dist < 1) {
                        this.dealDamage(0.5);
                    }
                }

                // Update shooting animation
                if (this.shootingTime > 0) {
                    this.shootingTime--;
                    if (this.shootingTime === 0) {
                        this.shooting = false;
                        this.muzzleFlash = false;
                    }
                }

                this.updateUI();
            }
            
            castRay(angle) {
                const rayX = Math.cos(angle);
                const rayY = Math.sin(angle);
                
                let x = this.player.x;
                let y = this.player.y;
                
                const stepSize = 0.02;
                
                while (true) {
                    x += rayX * stepSize;
                    y += rayY * stepSize;
                    
                    const mapX = Math.floor(x);
                    const mapY = Math.floor(y);
                    
                    if (mapX < 0 || mapX >= this.mapWidth || mapY < 0 || mapY >= this.mapHeight || this.map[mapY][mapX] === 1) {
                        const distance = Math.sqrt((x - this.player.x) ** 2 + (y - this.player.y) ** 2);
                        return distance;
                    }
                }
            }
            
            drawStickFigure(x, y, size, color) {
                // Safety limits to prevent huge models
                if (size > 60) size = 60;
                if (size < 8) return;
                
                this.ctx.save();
                this.ctx.strokeStyle = color;
                this.ctx.lineWidth = Math.max(1, size / 20);
                
                // Head
                this.ctx.beginPath();
                this.ctx.arc(x, y - size * 0.4, size * 0.12, 0, Math.PI * 2);
                this.ctx.stroke();
                
                // Body
                this.ctx.beginPath();
                this.ctx.moveTo(x, y - size * 0.28);
                this.ctx.lineTo(x, y + size * 0.2);
                this.ctx.stroke();
                
                // Arms
                this.ctx.beginPath();
                this.ctx.moveTo(x - size * 0.15, y - size * 0.1);
                this.ctx.lineTo(x + size * 0.15, y - size * 0.1);
                this.ctx.stroke();
                
                // Legs
                this.ctx.beginPath();
                this.ctx.moveTo(x, y + size * 0.2);
                this.ctx.lineTo(x - size * 0.12, y + size * 0.4);
                this.ctx.moveTo(x, y + size * 0.2);
                this.ctx.lineTo(x + size * 0.12, y + size * 0.4);
                this.ctx.stroke();
                
                this.ctx.restore();
            }
            
            render() {
                // Clear canvas
                this.ctx.fillStyle = '#000';
                this.ctx.fillRect(0, 0, this.width, this.height);
                
                // Draw sky
                this.ctx.fillStyle = '#333';
                this.ctx.fillRect(0, 0, this.width, this.height / 2);
                
                // Draw floor
                this.ctx.fillStyle = '#666';
                this.ctx.fillRect(0, this.height / 2, this.width, this.height / 2);
                
                const fov = Math.PI / 3;
                const halfFov = fov / 2;
                const numRays = this.width;
                
                // Cast rays and draw walls
                for (let i = 0; i < numRays; i++) {
                    const rayAngle = this.player.angle - halfFov + (i / numRays) * fov;
                    const distance = this.castRay(rayAngle);
                    
                    // Fix fisheye effect
                    const correctedDistance = distance * Math.cos(rayAngle - this.player.angle);
                    
                    const wallHeight = (this.height / correctedDistance) * 0.5;
                    const wallTop = (this.height - wallHeight) / 2;
                    
                    // Wall shading based on distance
                    const shade = Math.max(0, 255 - distance * 30);
                    this.ctx.fillStyle = `rgb(${shade}, 0, 0)`;
                    this.ctx.fillRect(i, wallTop, 1, wallHeight);
                }
                
                // Draw enemies as stick figures
                for (let enemy of this.enemies) {
                    if (enemy.alive) {
                        const dx = enemy.x - this.player.x;
                        const dy = enemy.y - this.player.y;
                        const distance = Math.sqrt(dx * dx + dy * dy);
                        const angle = Math.atan2(dy, dx) - this.player.angle;
                        
                        // Only draw if in view and not too far
                        if (Math.abs(angle) < Math.PI / 3 && distance < 8) {
                            const screenX = (this.width / 2) + (Math.tan(angle) * this.width / 2);
                            const enemySize = Math.max(15, 80 / distance);
                            const enemyY = this.height/2 + enemySize * 0.2; // Ground level
                            
                            // Make sure enemy is on screen
                            if (screenX > -enemySize && screenX < this.width + enemySize) {
                                this.drawStickFigure(screenX, enemyY, enemySize, '#ff4444');
                            }
                        }
                    }
                }

                // Draw ammo pickups
                this.ctx.fillStyle = '#ffff00';
                for (let a of this.ammoPickups) {
                    const dx = a.x - this.player.x;
                    const dy = a.y - this.player.y;
                    const distance = Math.sqrt(dx * dx + dy * dy);
                    const angle = Math.atan2(dy, dx) - this.player.angle;
                    if (Math.abs(angle) < Math.PI / 3 && distance < 8) {
                        const screenX = (this.width / 2) + (Math.tan(angle) * this.width / 2);
                        const size = Math.max(5, 30 / distance);
                        const sy = this.height/2 + size;
                        if (screenX > -size && screenX < this.width + size) {
                            this.ctx.fillRect(screenX - size/2, sy - size/2, size, size);
                        }
                    }
                }

                // Draw armor pickups
                this.ctx.fillStyle = '#00ffff';
                for (let a of this.armorPickups) {
                    const dx = a.x - this.player.x;
                    const dy = a.y - this.player.y;
                    const distance = Math.sqrt(dx * dx + dy * dy);
                    const angle = Math.atan2(dy, dx) - this.player.angle;
                    if (Math.abs(angle) < Math.PI / 3 && distance < 8) {
                        const screenX = (this.width / 2) + (Math.tan(angle) * this.width / 2);
                        const size = Math.max(5, 30 / distance);
                        const sy = this.height/2 + size;
                        if (screenX > -size && screenX < this.width + size) {
                            this.ctx.fillRect(screenX - size/2, sy - size/2, size, size);
                        }
                    }
                }
                
                // Muzzle flash
                if (this.muzzleFlash) {
                    this.ctx.fillStyle = 'rgba(255, 255, 0, 0.3)';
                    this.ctx.fillRect(0, 0, this.width, this.height);
                }
                
                // Weapon sprite (simple rectangle)
                const weaponWidth = 100;
                const weaponHeight = 150;
                const weaponX = this.width - weaponWidth - 50;
                const weaponY = this.height - weaponHeight;
                
                this.ctx.fillStyle = '#444';
                this.ctx.fillRect(weaponX, weaponY, weaponWidth, weaponHeight);
                
                if (this.shooting) {
                    this.ctx.fillStyle = '#666';
                    this.ctx.fillRect(weaponX + 10, weaponY + 10, weaponWidth - 20, weaponHeight - 20);
                }
            }
            
            gameLoop() {
                this.update();
                this.render();
                requestAnimationFrame(() => this.gameLoop());
            }
        }
        
        // Start the game
        const game = new DoomGame();
    </script>
</body>
</html>
